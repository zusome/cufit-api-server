
name: Deploy to Amazon ECS

on:
  push:
    branches: [ "production", "feature/sqsprovider" ]

env:
  AWS_REGION: ap-northeast-2            # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: cufit-backcore          # set this to your Amazon ECR repository name
  ECS_SERVICE: cufit-backcore             # set this to your Amazon ECS service name
  ECS_CLUSTER: cufit            # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: first-run-task-definition.json # set this to the path to your Amazon ECS task definition
                                               # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: cufit-backcore          # set this to the name of the container in the
                                               # containerDefinitions section of your task definition
  DATASOURCE_USERNAME: ${{ secrets.DATASOURCE_USERNAME}}
  DATASOURCE_PASSWORD: ${{ secrets.DATASOURCE_PASSWORD}}
  DATASOURCE_URL: ${{ secrets.DATASOURCE_URL}}
  SPRING_PROFILES_ACTIVE: ${{vars.SPRING_PROFILES_ACTIVE}}
permissions:
  contents: read

jobs:
  Deploy:
    name: Build by Gradle and Deploy to ECS
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: JDK 21 
      uses: actions/setup-java@v4
      with:
        distribution: 'oracle'
        java-version: '21'
        cache: 'gradle'
        
    - name: Gradle 명령 실행 권한 부여
      run: chmod +x ./gradlew
      shell: bash

    - name: Gradle로 프로젝트 Build
      run: |
        cat src/main/resources/application.yaml
        sed -i "s|ENV|${{env.SPRING_PROFILES_ACTIVE}}|g" src/main/resources/application.yaml
        sed -i "s|DB_URL|${{env.DATASOURCE_URL}}|g" src/main/resources/application.yaml
        sed -i "s|DB_USER|${{env.DATASOURCE_USERNAME}}|g" src/main/resources/application.yaml
        sed -i "s|DB_PW|${{env.DATASOURCE_PASSWORD}}|g" src/main/resources/application.yaml
        cat src/main/resources/application.yaml
        ./gradlew build -x test
  
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        # docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        # echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:latest" >> $GITHUB_OUTPUT

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: false
        deployment-configuration: |
          {
            "minimumHealthyPercent": 50,
            "maximumPercent": 300
          }
